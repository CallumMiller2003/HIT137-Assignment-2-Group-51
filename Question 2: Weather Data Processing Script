import os
import csv
import statistics

seasons = {
    'Summer': ['December', 'January', 'February'],
    'Autumn': ['March', 'April', 'May'],
    'Winter': ['June', 'July', 'August'],
    'Spring': ['September', 'October', 'November']
}

folder = 'temperatures'

all_data = []

# Read all CSV files in the folder
for file in os.listdir(folder):
    if file.endswith('.csv'):
        filepath = os.path.join(folder, file)
        with open(filepath, newline='') as f:
            reader = csv.DictReader(f)
            year = file.split('_')[-1].split('.')[0]
            for row in reader:
                row['Year'] = year
                all_data.append(row)

# Convert all month values to float (if possible)
month_columns = ['January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December']

for row in all_data:
    for month in month_columns:
        try:
            row[month] = float(row[month])
        except (ValueError, KeyError):
            row[month] = None

# Compute season averages
season_averages = {}
for season, months in seasons.items():
    temps = []
    for row in all_data:
        for month in months:
            temp = row.get(month)
            if temp is not None:
                temps.append(temp)
    avg = statistics.mean(temps) if temps else None
    season_averages[season] = avg

# Save season averages to a text file
with open('average_temp.txt', 'w') as f:
    for season, avg in season_averages.items():
        if avg is not None:
            f.write(f"{season}: {avg:.1f}°C\n")
        else:
            f.write(f"{season}: No data\n")

# Group by station and compute range
station_ranges = {}
for row in all_data:
    stn_id = row.get('STN_ID')
    station_name = row.get('STATION_NAME', 'Unknown')
    if stn_id not in station_ranges:
        station_ranges[stn_id] = {
            'name': station_name,
            'temps': []
        }
    for month in month_columns:
        temp = row.get(month)
        if temp is not None:
            station_ranges[stn_id]['temps'].append(temp)

# Compute range for each station
for stn_id, info in station_ranges.items():
    temps = info['temps']
    if temps:
        max_temp = max(temps)
        min_temp = min(temps)
        info['range'] = max_temp - min_temp
        info['max'] = max_temp
        info['min'] = min_temp
    else:
        info['range'] = None

# Find the station with the largest temperature range
valid_ranges = [(stn_id, info) for stn_id, info in station_ranges.items() if info['range'] is not None]

if valid_ranges:
    max_range_station = max(valid_ranges, key=lambda x: x[1]['range'])
    stn_id, info = max_range_station
    print(f"Station with max range: {info['name']} ({stn_id}) — Range: {info['range']:.1f}°C")

