import os
import csv
import statistics

seasons = {
    'Summer': ['December', 'January', 'February'],
    'Autumn': ['March', 'April', 'May'],
    'Winter': ['June', 'July', 'August'],
    'Spring': ['September', 'October', 'November']
}

folder = 'temperatures'

all_data = []

# Read all CSV files in the folder
for file in os.listdir(folder):
    if file.endswith('.csv'):
        filepath = os.path.join(folder, file)
        with open(filepath, newline='') as f:
            reader = csv.DictReader(f)
            year = file.split('_')[-1].split('.')[0]
            for row in reader:
                row['Year'] = year
                all_data.append(row)

# Convert all month values to float (if possible)
month_columns = ['January', 'February', 'March', 'April', 'May', 'June',
                 'July', 'August', 'September', 'October', 'November', 'December']

for row in all_data:
    for month in month_columns:
        try:
            row[month] = float(row[month])
        except (ValueError, KeyError):
            row[month] = None

# Compute season averages
season_averages = {}
for season, months in seasons.items():
    temps = []
    for row in all_data:
        for month in months:
            temp = row.get(month)
            if temp is not None:
                temps.append(temp)
    avg = statistics.mean(temps) if temps else None
    season_averages[season] = avg

# Save season averages to a text file
with open('average_temp.txt', 'w') as f:
    for season, avg in season_averages.items():
        if avg is not None:
            f.write(f"{season}: {avg:.1f}°C\n")
        else:
            f.write(f"{season}: No data\n")

# Group by station and compute range
station_ranges = {}
for row in all_data:
    stn_id = row.get('STN_ID')
    station_name = row.get('STATION_NAME', 'Unknown')
    if stn_id not in station_ranges:
        station_ranges[stn_id] = {
            'name': station_name,
            'temps': []
        }
    for month in month_columns:
        temp = row.get(month)
        if temp is not None:
            station_ranges[stn_id]['temps'].append(temp)

# Compute range for each station
for stn_id, info in station_ranges.items():
    temps = info['temps']
    if temps:
        max_temp = max(temps)
        min_temp = min(temps)
        info['range'] = max_temp - min_temp
        info['max'] = max_temp
        info['min'] = min_temp
    else:
        info['range'] = None

# Find stations with the largest and smallest temperature ranges
valid_ranges = [(stn_id, info) for stn_id, info in station_ranges.items() if info['range'] is not None]

if valid_ranges:
    max_range = max(info['range'] for _, info in valid_ranges)
    min_range = min(info['range'] for _, info in valid_ranges)

    widest = [(stn_id, info) for stn_id, info in valid_ranges if info['range'] == max_range]
    narrowest = [(stn_id, info) for stn_id, info in valid_ranges if info['range'] == min_range]

    # Console output
    print("Stations with widest temperature range:")
    for stn_id, info in widest:
        print(f"{info['name']} ({stn_id}) — Range: {info['range']:.1f}°C "
              f"(min {info['min']:.1f}°C, max {info['max']:.1f}°C)")

    print("\nStations with narrowest temperature range:")
    for stn_id, info in narrowest:
        print(f"{info['name']} ({stn_id}) — Range: {info['range']:.1f}°C "
              f"(min {info['min']:.1f}°C, max {info['max']:.1f}°C)")

    # Append to the text file
    with open('average_temp.txt', 'a', encoding='utf-8') as f:
        f.write("\nStations with widest temperature range:\n")
        for stn_id, info in widest:
            f.write(f"{info['name']} ({stn_id}) — Range: {info['range']:.1f}°C "
                    f"(min {info['min']:.1f}°C, max {info['max']:.1f}°C)\n")
        f.write("\nStations with narrowest temperature range:\n")
        for stn_id, info in narrowest:
            f.write(f"{info['name']} ({stn_id}) — Range: {info['range']:.1f}°C "
                    f"(min {info['min']:.1f}°C, max {info['max']:.1f}°C)\n")
else:
    print("No valid station ranges found.")

#Temperature Stability
for stn_id, info in station_ranges.items():
    temps = info.get('temps', [])
    info['stddev'] = statistics.stdev(temps) if len(temps) >= 2 else None

valid_std = [(stn_id, info) for stn_id, info in station_ranges.items()
             if info.get('stddev') is not None]

if valid_std:
    min_std = min(info['stddev'] for _, info in valid_std)
    max_std = max(info['stddev'] for _, info in valid_std)

    most_stable = [(stn_id, info) for stn_id, info in valid_std
                   if info['stddev'] == min_std]
    most_variable = [(stn_id, info) for stn_id, info in valid_std
                     if info['stddev'] == max_std]


    print("\nTemperature Stability:")
    for stn_id, info in most_stable:
        print(f'Most Stable: {info["name"]}: StdDev {info["stddev"]:.1f}°C')
    for stn_id, info in most_variable:
        print(f'Most Variable: {info["name"]}: StdDev {info["stddev"]:.1f}°C')

    # Save to file
    with open('temperature_stability_stations.txt', 'w', encoding='utf-8') as f:
        for stn_id, info in most_stable:
            f.write(f'"Most Stable: {info["name"]}: StdDev {info["stddev"]:.1f}°C"\n')
        for stn_id, info in most_variable:
            f.write(f'"Most Variable: {info["name"]}: StdDev {info["stddev"]:.1f}°C"\n')
else:
    
    with open('temperature_stability_stations.txt', 'w', encoding='utf-8') as f:
        f.write("No stations with enough data to compute standard deviation.\n")


